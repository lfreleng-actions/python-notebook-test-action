---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

# python-notebook-test-action
name: 'Verify Jupyter Notebooks'
description: 'Validates Jupyter Notebooks with pytest and nbmake'

# Related documentation
# https://github.com/treebeardtech/nbmake

inputs:
  # Mandatory
  python_version:
    description: 'Python version used to run tests'
    required: true
    # type: string
  # Optional
  permit_fail:
    description: 'Continue even when one or more tests fails'
    required: false
    # type: boolean
    default: 'false'
  path_prefix:
    description: 'Directory location containing Python project code'
    # type: string
    required: false
  parallel_tests:
    # Note: installs and uses pytest-xdist
    description: 'Parallel pytest/nbmake processes'
    # type: boolean
    required: false
    default: 'false'
  nbmake_kernel:
    description: 'Force nbmake to use a specific kernel'
    # type: string
    required: false
  install_kernel:
    description: 'Install custom kernel prior to testing'
    # type: string
    required: false
  PYTEST_FLAGS:
    description: 'Flags to send to the pytest command'
    # type: string
    required: false
    default: '--no-cov'

runs:
  using: 'composite'
  steps:
    - name: 'Setup action/environment'
      shell: bash
      run: |
        # Setup action/environment
        if [ -z "${{ inputs.python_version }}" ]; then
          echo 'Error: Python version was not provided ‚ùå'; exit 1
        else
          echo "Using Python: ${{ inputs.python_version }} üêç"
        fi

        # Handle path_prefix input consistently and when absent
        path_prefix="${{ inputs.PATH_PREFIX }}"
        if [ -z "$path_prefix" ]; then
          # Set current directory as path prefix
          path_prefix="."
        else
          #¬†Strip any trailing slash in provided path
          path_prefix="${path_prefix%/}"
        fi
        # Verify is a valid directory path
        if [ ! -d "$path_prefix" ]; then
          echo 'Error: invalid path/prefix to project directory ‚ùå'; exit 1
        fi
        echo "path_prefix=$path_prefix" >> "$GITHUB_ENV"

        if [ "f${{ inputs.PERMIT_FAIL }}" = "ftrue" ]; then
          echo 'Warning: test failures will be permitted ‚ö†Ô∏è'
        fi

    - name: "Setup Python"
      # yamllint disable-line rule:line-length
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
      with:
        python-version: ${{ inputs.python_version }}

    - name: 'Cache Python dependencies'
      uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.0.2
      with:
        path: |
          ~/.cache/pip
          ~/.cache/pypoetry
          ~/.cache/pipenv
          .venv
          .tox
        # yamllint disable rule:line-length
        key: >-
          python-${{ runner.os }}-${{ inputs.python_version }}-
          ${{ hashFiles('**/requirements*.txt', '**/pyproject.toml', '**/poetry.lock', '**/Pipfile*', '**/setup.py', '**/setup.cfg') }}
        restore-keys: |
          python-${{ runner.os }}-${{ inputs.python_version }}-
          python-${{ runner.os }}-
        # yamllint enable rule:line-length

    - name: 'Install notebook/test dependencies'
      shell: bash
      run: |
        # Install notebook/test dependencies
        echo 'Installing: pytest, pytest-cov, nbmake ‚¨áÔ∏è'
        # Note: pytest-xdist used for parallel testing
        pip install --disable-pip-version-check -q \
          pytest pytest-cov nbmake

        echo 'Install project and dependencies'
        if [ -f ${{ env.path_prefix }}/pyproject.toml ]; then
            echo "Source: ${{ env.path_prefix }}/pyproject.toml ‚¨áÔ∏è"
            pip install -q "${{ env.path_prefix }}/"
        elif [ -f ${{ env.path_prefix }}/requirements.txt ]; then
          echo "Source: ${{ env.path_prefix }}/requirements.txt ‚¨áÔ∏è"
          pip install -q -r "${{ env.path_prefix }}/requirements.txt"
        else
          #¬†Jupyter Notebooks are not necessarily Python projects
          echo 'No Python dependencies to install ‚ö†Ô∏è'
        fi

        #¬†Set appropriate flags to nbmake
        if [ -n "${{ inputs.nbmake_kernel }}" ]; then
          echo "Forcing use of a custom kernel: ${{ inputs.nbmake_kernel }} üí¨"
          echo "kernel_flags=--nbmake-kernel=${{ inputs.nbmake_kernel }}" \
            >> "$GITHUB_ENV"
        fi
        #¬†Set flags for parallel testing
        if [ "${{ inputs.parallel_tests }}" = 'true' ]; then
          echo "flags=-n=auto" >> "$GITHUB_ENV"
        fi

    - name: 'Install Pytest parallel test tool'
      if: inputs.parallel_tests == 'true'
      shell: bash
      run: |
        # Install parallel test tool
        echo 'Installing: pytest-xdist ‚¨áÔ∏è'
        pip install -q pytest-xdist

    - name: "Error when kernel not specified but install requested"
      if: inputs.install_kernel == 'true' && inputs.nbmake_kernel == ''
      shell: bash
      run: |
        # Error when kernel not specified but install requested
        echo 'Error: kernel install requested but name NOT specified ‚ùå'
        exit 1

    - name: 'Install nbmake custom kernel'
      if: inputs.install_kernel == 'true'
      shell: bash
      run: |
        # Install parallel test tool
        echo "Installing custom nbmake kernel: ${{ inputs.nbmake_kernel }} ‚¨áÔ∏è"
        python -m ipykernel install --user --name "${{ inputs.nbmake_kernel }}"

    - name: 'Build/test Jupyter Notebooks'
      shell: bash
      run: |
        # Build/Test Jupyter Notebooks
        echo 'Searching repository for Jupyter Notebooks'
        find "${{ env.path_prefix }}/" -name '*.ipynb'
        if [ $? -eq 0 ]; then
          if [ "f${{ inputs.permit_fail }}" = 'ftrue' ]; then
            echo 'Warning: flag set to permit test failures ‚ö†Ô∏è'
            pytest --nbmake \
              ${{ inputs.pytest_flags }} \
              ${{ env.kernel_flags }} \
              ${{ env.flags }} \
              ${{ env.path_prefix }}/**/*ipynb || true
          else
            pytest --nbmake \
              ${{ inputs.pytest_flags }} \
              ${{ env.kernel_flags }} \
              ${{ env.flags }} \
              ${{ env.path_prefix }}/**/*ipynb
          fi
        else
          echo 'Error: no Jupyter Notebooks were found ‚ùå'; exit 1
        fi
